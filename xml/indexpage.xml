<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>JavaDoc API Markup for wwndesc</title>
    <detaileddescription>
<para><heading level="1">wwndesc </heading>
</para><para>WWNDesc is a tool I use to give functional usable nicknames/aliases to devices present on a SAN when a customer may not have them but needs identifiers quickly. In some cases, these names are used as the canonical names: cases involving very large organizations where the name isn&apos;t a huge deal, but having a name is.</para><para>For example: you give me: 50000972081349ad I give you: VMax-HK192601234-12gB (or VMax-1234-12gB)</para><para><heading level="1">BUILDING </heading>
</para><para>This is a standard AutoTools build, so:</para><para>1) autoreconf -vfi</para><para>2) make install (or &quot;make check&quot; to include that plus run the tests)</para><para>3) make rpm (if so inclined)</para><para>java/wwndesc.jar is the proper built jar file; convjars is where &quot;convenience jars&quot; are built if you&apos;re less concerned with license purity and more concerned with:</para><para>1) your tests are bogus. Let me test exactly what you tested; or</para><para>2) I need it working like yesterday. Holy crap please help me. Gimme something to download immediately to make the pain stop.</para><para>We&apos;ve all been there. In both cases. grab convjars/wwndesc.jar, it&apos;s not sanitary, but it works.</para><para><heading level="1">USAGE </heading>
</para><para>Example usage at: <verbatim>java -jar wwndesc.jar -H
</verbatim></para><para>Example Search for an Alias/Description: <verbatim>String wwn = &quot;50000972081349ad&quot;;
WWNDescription desc = new WWNDescription();

WWNDesc alias;

if (null != (alias = desc.getWWNDescriptor(wwn)))
    System.out.println(alias.toString());
else
    System.out.println(&quot;no alias generated from &quot;+wwn);
</verbatim></para><para><heading level="1">DOCUMENTATION </heading>
</para><para>The canonical code repository is at <ulink url="https://github.com/chickenandpork/wwndesc/">https://github.com/chickenandpork/wwndesc/</ulink></para><para>API documentation is based on JavaDoc-generated cross-referenced pages pushed to <ulink url="http://chickenandpork.github.io/wwndesc/">http://chickenandpork.github.io/wwndesc/</ulink> and pushed using: <verbatim>autoreconf -vfi &amp;&amp; ./configure --with-doxygen &amp;&amp; make doc &amp;&amp; cd htdocs &amp;&amp; git push
autoreconf -vfi &amp;&amp; ./configure --with-doxygen &amp;&amp; make doc DOXYMESSAGE=&quot;a commit message&quot;
</verbatim></para><para><heading level="1">DEVELOPMENT </heading>
</para><para>There are a few &quot;housekeeping&quot; items in the codebase, such as pkg/Doxyfile.in, the GITDESCRIPTION stuff in the Makefile.am, etc.</para><para>A bit more unusual: <ref refid="version_8java" kindref="compound">java/version.java</ref> (<ulink url="http://chickenandpork.github.io/wwndesc/classorg_1_1smallfoot_1_1wwn_1_1version.html">http://chickenandpork.github.io/wwndesc/classorg_1_1smallfoot_1_1wwn_1_1version.html</ulink>) is created from java/version.java.in to include the version in a simple parseable output to ensure that the jar file is read, and the version itself can be read, interpreted, and passed forth in autoconf-generated configure scripts in dependent projects.</para><para>The basic structure of this project is where WWNDescription&apos;s (<ulink url="http://chickenandpork.github.io/wwndesc/classorg_1_1smallfoot_1_1wwn_1_1WWNDescription.html">http://chickenandpork.github.io/wwndesc/classorg_1_1smallfoot_1_1wwn_1_1WWNDescription.html</ulink>) getWWNDescriptor(String wwn) searches through a maintained list of WWNDesc descendents for a OUI or pattern that matches; the WWNDesc descendent is instantiated, and returned, or getWWNDescription() returns a null.</para><para><simplesect kind="see"><para><ref refid="classorg_1_1smallfoot_1_1wwn_1_1WWNDescription_1a44589ea01f3c2e5a8fbe84cb249ec404" kindref="member">org.smallfoot.wwn.WWNDescription.getWWNDescriptor</ref></para></simplesect>
Adding new WWN patterns herein is a case of either extending the existing patterns as manufacturers evolve their usage, or adding new descendent classes of WWNDesc, and adding their classnames to the getWWNDescriptor() class. You can see that the getWWNDescriptor() function call is relatively simple at this point: the logic for whether a WWNDesc descendent matches a given pattern is moved to static function calls. For example, if NetAddDescription::getDesc(boolean, boolean, String) decides that the given WWN matches, it&apos;ll return an instance of itself; otherwise, it&apos;ll return a null. This was done to allow more than one pattern to be represented in the WWNDesc for later expansion: for example, a HDS super-class that returns configured subclasses, or configures instances of itself for different personalities. </para>    </detaileddescription>
  </compounddef>
</doxygen>
